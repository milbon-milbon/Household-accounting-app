generator client {
  provider        = "prisma-client-js"
   binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                      @id @default(autoincrement())
  member         String                   @db.VarChar(50)
  name           String                   @db.VarChar(100)
  mail           String                   @unique @db.VarChar(100)
  password_hash  String                   @db.VarChar(255)
  created_at     DateTime                 @default(now()) @db.Timestamp(0)
  updated_at     DateTime                 @updatedAt @db.Timestamp(0)
  incomeAndExpenditures  income_and_expenditure[] // リレーション
  payments       Payment[]                // リレーション
  transactions   Transaction[]            // リレーション
}

model income_and_expenditure {
  id            Int                      @id @default(autoincrement())
  category_id   Int
  user_id       Int
  transaction_id Int
  payment_type  String                   @db.VarChar(20)
  day           DateTime                 @db.Date
  amount        Decimal                  @db.Decimal(10, 2)
  User          User                     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Transaction   Transaction              @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  Category      Category                 @relation(fields: [category_id], references: [id], onDelete: Restrict)
}

model Category {
  id           Int                       @id @default(autoincrement())
  payment_id   Int
  contents     String                    @db.VarChar(100)
  Payment      Payment                   @relation(fields: [payment_id], references: [id], onDelete: Restrict)
  incomeAndExpenditures  income_and_expenditure[] // リレーション
  transactions Transaction[]             // リレーション
}

model Payment {
  id           Int                       @id @default(autoincrement())
  user_id      Int
  payment_items String                   @db.VarChar(100)
  User         User                      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  categories   Category[]                // リレーション
  transactions Transaction[]             // リレーション
}

model Transaction {
  id            Int                      @id @default(autoincrement())
  user_id       Int
  category_id   Int
  payment_id    Int
  member        String                   @db.VarChar(50)
  name          String                   @db.VarChar(100)
  payment_items String                   @db.VarChar(100)
  payment_type  String                   @db.VarChar(20)
  day           DateTime                 @db.Date
  amount        Decimal                  @db.Decimal(10, 2)
  contents      String?
  remarks       String?
  User          User                     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Category      Category                 @relation(fields: [category_id], references: [id], onDelete: Restrict)
  Payment       Payment                  @relation(fields: [payment_id], references: [id], onDelete: Restrict)
  incomeAndExpenditures  income_and_expenditure[] // リレーション
}
