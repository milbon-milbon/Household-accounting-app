"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/swr";
exports.ids = ["vendor-chunks/swr"];
exports.modules = {

/***/ "(ssr)/./node_modules/swr/dist/_internal/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/swr/dist/_internal/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INFINITE_PREFIX: () => (/* binding */ INFINITE_PREFIX),\n/* harmony export */   IS_REACT_LEGACY: () => (/* binding */ IS_REACT_LEGACY),\n/* harmony export */   IS_SERVER: () => (/* binding */ IS_SERVER),\n/* harmony export */   OBJECT: () => (/* binding */ OBJECT),\n/* harmony export */   SWRConfig: () => (/* binding */ SWRConfig),\n/* harmony export */   SWRGlobalState: () => (/* binding */ SWRGlobalState),\n/* harmony export */   UNDEFINED: () => (/* binding */ UNDEFINED),\n/* harmony export */   cache: () => (/* binding */ cache),\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   createCacheHelper: () => (/* binding */ createCacheHelper),\n/* harmony export */   defaultConfig: () => (/* binding */ defaultConfig),\n/* harmony export */   defaultConfigOptions: () => (/* binding */ defaultConfigOptions),\n/* harmony export */   getTimestamp: () => (/* binding */ getTimestamp),\n/* harmony export */   hasRequestAnimationFrame: () => (/* binding */ hasRequestAnimationFrame),\n/* harmony export */   initCache: () => (/* binding */ initCache),\n/* harmony export */   internalMutate: () => (/* binding */ internalMutate),\n/* harmony export */   isDocumentDefined: () => (/* binding */ isDocumentDefined),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isPromiseLike: () => (/* binding */ isPromiseLike),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   isWindowDefined: () => (/* binding */ isWindowDefined),\n/* harmony export */   mergeConfigs: () => (/* binding */ mergeConfigs),\n/* harmony export */   mergeObjects: () => (/* binding */ mergeObjects),\n/* harmony export */   mutate: () => (/* binding */ mutate),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   preload: () => (/* binding */ preload),\n/* harmony export */   preset: () => (/* binding */ preset),\n/* harmony export */   rAF: () => (/* binding */ rAF),\n/* harmony export */   revalidateEvents: () => (/* binding */ events),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   slowConnection: () => (/* binding */ slowConnection),\n/* harmony export */   stableHash: () => (/* binding */ stableHash),\n/* harmony export */   subscribeCallback: () => (/* binding */ subscribeCallback),\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect),\n/* harmony export */   useSWRConfig: () => (/* binding */ useSWRConfig),\n/* harmony export */   withArgs: () => (/* binding */ withArgs),\n/* harmony export */   withMiddleware: () => (/* binding */ withMiddleware)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\n// Shared state between server components and client components\nconst noop = () => {};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nconst UNDEFINED = /*#__NOINLINE__*/noop();\nconst OBJECT = Object;\nconst isUndefined = v => v === UNDEFINED;\nconst isFunction = v => typeof v == 'function';\nconst mergeObjects = (a, b) => ({\n  ...a,\n  ...b\n});\nconst isPromiseLike = x => isFunction(x.then);\n\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nconst table = new WeakMap();\n// counter of the key\nlet counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nconst stableHash = arg => {\n  const type = typeof arg;\n  const constructor = arg && arg.constructor;\n  const isDate = constructor == Date;\n  let result;\n  let index;\n  if (OBJECT(arg) === arg && !isDate && constructor != RegExp) {\n    // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n    // If it's already hashed, directly return the result.\n    result = table.get(arg);\n    if (result) return result;\n    // Store the hash first for circular reference detection before entering the\n    // recursive `stableHash` calls.\n    // For other objects like set and map, we use this id directly as the hash.\n    result = ++counter + '~';\n    table.set(arg, result);\n    if (constructor == Array) {\n      // Array.\n      result = '@';\n      for (index = 0; index < arg.length; index++) {\n        result += stableHash(arg[index]) + ',';\n      }\n      table.set(arg, result);\n    }\n    if (constructor == OBJECT) {\n      // Object, sort keys.\n      result = '#';\n      const keys = OBJECT.keys(arg).sort();\n      while (!isUndefined(index = keys.pop())) {\n        if (!isUndefined(arg[index])) {\n          result += index + ':' + stableHash(arg[index]) + ',';\n        }\n      }\n      table.set(arg, result);\n    }\n  } else {\n    result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n  }\n  return result;\n};\n\n// Global state used to deduplicate requests and store listeners\nconst SWRGlobalState = new WeakMap();\nconst EMPTY_CACHE = {};\nconst INITIAL_CACHE = {};\nconst STR_UNDEFINED = 'undefined';\n// NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\nconst isWindowDefined = false;\nconst isDocumentDefined = typeof document != STR_UNDEFINED;\nconst hasRequestAnimationFrame = () => isWindowDefined && typeof window['requestAnimationFrame'] != STR_UNDEFINED;\nconst createCacheHelper = (cache, key) => {\n  const state = SWRGlobalState.get(cache);\n  return [\n  // Getter\n  () => !isUndefined(key) && cache.get(key) || EMPTY_CACHE,\n  // Setter\n  info => {\n    if (!isUndefined(key)) {\n      const prev = cache.get(key);\n      // Before writing to the store, we keep the value in the initial cache\n      // if it's not there yet.\n      if (!(key in INITIAL_CACHE)) {\n        INITIAL_CACHE[key] = prev;\n      }\n      state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\n    }\n  },\n  // Subscriber\n  state[6],\n  // Get server cache snapshot\n  () => {\n    if (!isUndefined(key)) {\n      // If the cache was updated on the client, we return the stored initial value.\n      if (key in INITIAL_CACHE) return INITIAL_CACHE[key];\n    }\n    // If we haven't done any client-side updates, we return the current value.\n    return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n  }];\n} // export { UNDEFINED, OBJECT, isUndefined, isFunction, mergeObjects, isPromiseLike }\n;\n\n/**\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\n * it's not reliable to detect if the browser is currently online or offline\n * based on `navigator.onLine`.\n * As a workaround, we always assume it's online on the first load, and change\n * the status upon `online` or `offline` events.\n */\nlet online = true;\nconst isOnline = () => online;\n// For node and React Native, `add/removeEventListener` doesn't exist on window.\nconst [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [window.addEventListener.bind(window), window.removeEventListener.bind(window)] : [noop, noop];\nconst isVisible = () => {\n  const visibilityState = isDocumentDefined && document.visibilityState;\n  return isUndefined(visibilityState) || visibilityState !== 'hidden';\n};\nconst initFocus = callback => {\n  // focus revalidate\n  if (isDocumentDefined) {\n    document.addEventListener('visibilitychange', callback);\n  }\n  onWindowEvent('focus', callback);\n  return () => {\n    if (isDocumentDefined) {\n      document.removeEventListener('visibilitychange', callback);\n    }\n    offWindowEvent('focus', callback);\n  };\n};\nconst initReconnect = callback => {\n  // revalidate on reconnected\n  const onOnline = () => {\n    online = true;\n    callback();\n  };\n  // nothing to revalidate, just update the status\n  const onOffline = () => {\n    online = false;\n  };\n  onWindowEvent('online', onOnline);\n  onWindowEvent('offline', onOffline);\n  return () => {\n    offWindowEvent('online', onOnline);\n    offWindowEvent('offline', onOffline);\n  };\n};\nconst preset = {\n  isOnline,\n  isVisible\n};\nconst defaultConfigOptions = {\n  initFocus,\n  initReconnect\n};\nconst IS_REACT_LEGACY = !react__WEBPACK_IMPORTED_MODULE_0__.useId;\nconst IS_SERVER = !isWindowDefined || 'Deno' in window;\n// Polyfill requestAnimationFrame\nconst rAF = f => hasRequestAnimationFrame() ? window['requestAnimationFrame'](f) : setTimeout(f, 1);\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nconst useIsomorphicLayoutEffect = IS_SERVER ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\n// This assignment is to extend the Navigator type to use effectiveType.\nconst navigatorConnection = typeof navigator !== 'undefined' && navigator.connection;\n// Adjust the config based on slow connection status (<= 70Kbps).\nconst slowConnection = !IS_SERVER && navigatorConnection && (['slow-2g', '2g'].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\nconst serialize = key => {\n  if (isFunction(key)) {\n    try {\n      key = key();\n    } catch (err) {\n      // dependencies not ready\n      key = '';\n    }\n  }\n  // Use the original key as the argument of fetcher. This can be a string or an\n  // array of values.\n  const args = key;\n  // If key is not falsy, or not an empty array, hash it.\n  key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n  return [key, args];\n};\n\n// Global timestamp.\nlet __timestamp = 0;\nconst getTimestamp = () => ++__timestamp;\nconst FOCUS_EVENT = 0;\nconst RECONNECT_EVENT = 1;\nconst MUTATE_EVENT = 2;\nconst ERROR_REVALIDATE_EVENT = 3;\nvar events = {\n  __proto__: null,\n  ERROR_REVALIDATE_EVENT: ERROR_REVALIDATE_EVENT,\n  FOCUS_EVENT: FOCUS_EVENT,\n  MUTATE_EVENT: MUTATE_EVENT,\n  RECONNECT_EVENT: RECONNECT_EVENT\n};\nasync function internalMutate(...args) {\n  const [cache, _key, _data, _opts] = args;\n  // When passing as a boolean, it's explicitly used to disable/enable\n  // revalidation.\n  const options = mergeObjects({\n    populateCache: true,\n    throwOnError: true\n  }, typeof _opts === 'boolean' ? {\n    revalidate: _opts\n  } : _opts || {});\n  let populateCache = options.populateCache;\n  const rollbackOnErrorOption = options.rollbackOnError;\n  let optimisticData = options.optimisticData;\n  const rollbackOnError = error => {\n    return typeof rollbackOnErrorOption === 'function' ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\n  };\n  const throwOnError = options.throwOnError;\n  // If the second argument is a key filter, return the mutation results for all\n  // filtered keys.\n  if (isFunction(_key)) {\n    const keyFilter = _key;\n    const matchedKeys = [];\n    const it = cache.keys();\n    for (const key of it) {\n      if (\n      // Skip the special useSWRInfinite and useSWRSubscription keys.\n      !/^\\$(inf|sub)\\$/.test(key) && keyFilter(cache.get(key)._k)) {\n        matchedKeys.push(key);\n      }\n    }\n    return Promise.all(matchedKeys.map(mutateByKey));\n  }\n  return mutateByKey(_key);\n  async function mutateByKey(_k) {\n    // Serialize key\n    const [key] = serialize(_k);\n    if (!key) return;\n    const [get, set] = createCacheHelper(cache, key);\n    const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache);\n    const startRevalidate = () => {\n      const revalidators = EVENT_REVALIDATORS[key];\n      const revalidate = isFunction(options.revalidate) ? options.revalidate(get().data, _k) : options.revalidate !== false;\n      if (revalidate) {\n        // Invalidate the key by deleting the concurrent request markers so new\n        // requests will not be deduped.\n        delete FETCH[key];\n        delete PRELOAD[key];\n        if (revalidators && revalidators[0]) {\n          return revalidators[0](MUTATE_EVENT).then(() => get().data);\n        }\n      }\n      return get().data;\n    };\n    // If there is no new data provided, revalidate the key with current state.\n    if (args.length < 3) {\n      // Revalidate and broadcast state.\n      return startRevalidate();\n    }\n    let data = _data;\n    let error;\n    // Update global timestamps.\n    const beforeMutationTs = getTimestamp();\n    MUTATION[key] = [beforeMutationTs, 0];\n    const hasOptimisticData = !isUndefined(optimisticData);\n    const state = get();\n    // `displayedData` is the current value on screen. It could be the optimistic value\n    // that is going to be overridden by a `committedData`, or get reverted back.\n    // `committedData` is the validated value that comes from a fetch or mutation.\n    const displayedData = state.data;\n    const currentData = state._c;\n    const committedData = isUndefined(currentData) ? displayedData : currentData;\n    // Do optimistic data update.\n    if (hasOptimisticData) {\n      optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;\n      // When we set optimistic data, backup the current committedData data in `_c`.\n      set({\n        data: optimisticData,\n        _c: committedData\n      });\n    }\n    if (isFunction(data)) {\n      // `data` is a function, call it passing current cache value.\n      try {\n        data = data(committedData);\n      } catch (err) {\n        // If it throws an error synchronously, we shouldn't update the cache.\n        error = err;\n      }\n    }\n    // `data` is a promise/thenable, resolve the final data first.\n    if (data && isPromiseLike(data)) {\n      // This means that the mutation is async, we need to check timestamps to\n      // avoid race conditions.\n      data = await data.catch(err => {\n        error = err;\n      });\n      // Check if other mutations have occurred since we've started this mutation.\n      // If there's a race we don't update cache or broadcast the change,\n      // just return the data.\n      if (beforeMutationTs !== MUTATION[key][0]) {\n        if (error) throw error;\n        return data;\n      } else if (error && hasOptimisticData && rollbackOnError(error)) {\n        // Rollback. Always populate the cache in this case but without\n        // transforming the data.\n        populateCache = true;\n        // Reset data to be the latest committed data, and clear the `_c` value.\n        set({\n          data: committedData,\n          _c: UNDEFINED\n        });\n      }\n    }\n    // If we should write back the cache after request.\n    if (populateCache) {\n      if (!error) {\n        // Transform the result into data.\n        if (isFunction(populateCache)) {\n          const populateCachedData = populateCache(data, committedData);\n          set({\n            data: populateCachedData,\n            error: UNDEFINED,\n            _c: UNDEFINED\n          });\n        } else {\n          // Only update cached data and reset the error if there's no error. Data can be `undefined` here.\n          set({\n            data,\n            error: UNDEFINED,\n            _c: UNDEFINED\n          });\n        }\n      }\n    }\n    // Reset the timestamp to mark the mutation has ended.\n    MUTATION[key][1] = getTimestamp();\n    // Update existing SWR Hooks' internal states:\n    Promise.resolve(startRevalidate()).then(() => {\n      // The mutation and revalidation are ended, we can clear it since the data is\n      // not an optimistic value anymore.\n      set({\n        _c: UNDEFINED\n      });\n    });\n    // Throw error or return data\n    if (error) {\n      if (throwOnError) throw error;\n      return;\n    }\n    return data;\n  }\n}\nconst revalidateAllKeys = (revalidators, type) => {\n  for (const key in revalidators) {\n    if (revalidators[key][0]) revalidators[key][0](type);\n  }\n};\nconst initCache = (provider, options) => {\n  // The global state for a specific provider will be used to deduplicate\n  // requests and store listeners. As well as a mutate function that is bound to\n  // the cache.\n  // The provider's global state might be already initialized. Let's try to get the\n  // global state associated with the provider first.\n  if (!SWRGlobalState.has(provider)) {\n    const opts = mergeObjects(defaultConfigOptions, options);\n    // If there's no global state bound to the provider, create a new one with the\n    // new mutate function.\n    const EVENT_REVALIDATORS = {};\n    const mutate = internalMutate.bind(UNDEFINED, provider);\n    let unmount = noop;\n    const subscriptions = {};\n    const subscribe = (key, callback) => {\n      const subs = subscriptions[key] || [];\n      subscriptions[key] = subs;\n      subs.push(callback);\n      return () => subs.splice(subs.indexOf(callback), 1);\n    };\n    const setter = (key, value, prev) => {\n      provider.set(key, value);\n      const subs = subscriptions[key];\n      if (subs) {\n        for (const fn of subs) {\n          fn(value, prev);\n        }\n      }\n    };\n    const initProvider = () => {\n      if (!SWRGlobalState.has(provider)) {\n        // Update the state if it's new, or if the provider has been extended.\n        SWRGlobalState.set(provider, [EVENT_REVALIDATORS, {}, {}, {}, mutate, setter, subscribe]);\n        if (!IS_SERVER) {\n          // When listening to the native events for auto revalidations,\n          // we intentionally put a delay (setTimeout) here to make sure they are\n          // fired after immediate JavaScript executions, which can be\n          // React's state updates.\n          // This avoids some unnecessary revalidations such as\n          // https://github.com/vercel/swr/issues/1680.\n          const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, FOCUS_EVENT)));\n          const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, RECONNECT_EVENT)));\n          unmount = () => {\n            releaseFocus && releaseFocus();\n            releaseReconnect && releaseReconnect();\n            // When un-mounting, we need to remove the cache provider from the state\n            // storage too because it's a side-effect. Otherwise, when re-mounting we\n            // will not re-register those event listeners.\n            SWRGlobalState.delete(provider);\n          };\n        }\n      }\n    };\n    initProvider();\n    // This is a new provider, we need to initialize it and setup DOM events\n    // listeners for `focus` and `reconnect` actions.\n    // We might want to inject an extra layer on top of `provider` in the future,\n    // such as key serialization, auto GC, etc.\n    // For now, it's just a `Map` interface without any modifications.\n    return [provider, mutate, initProvider, unmount];\n  }\n  return [provider, SWRGlobalState.get(provider)[4]];\n};\n\n// error retry\nconst onErrorRetry = (_, __, config, revalidate, opts) => {\n  const maxRetryCount = config.errorRetryCount;\n  const currentRetryCount = opts.retryCount;\n  // Exponential backoff\n  const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\n  if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\n    return;\n  }\n  setTimeout(revalidate, timeout, opts);\n};\nconst compare = (currentData, newData) => stableHash(currentData) == stableHash(newData);\n// Default cache provider\nconst [cache, mutate] = initCache(new Map());\n// Default config\nconst defaultConfig = mergeObjects({\n  // events\n  onLoadingSlow: noop,\n  onSuccess: noop,\n  onError: noop,\n  onErrorRetry,\n  onDiscarded: noop,\n  // switches\n  revalidateOnFocus: true,\n  revalidateOnReconnect: true,\n  revalidateIfStale: true,\n  shouldRetryOnError: true,\n  // timeouts\n  errorRetryInterval: slowConnection ? 10000 : 5000,\n  focusThrottleInterval: 5 * 1000,\n  dedupingInterval: 2 * 1000,\n  loadingTimeout: slowConnection ? 5000 : 3000,\n  // providers\n  compare,\n  isPaused: () => false,\n  cache,\n  mutate,\n  fallback: {}\n},\n// use web preset by default\npreset);\nconst mergeConfigs = (a, b) => {\n  // Need to create a new object to avoid mutating the original here.\n  const v = mergeObjects(a, b);\n  // If two configs are provided, merge their `use` and `fallback` options.\n  if (b) {\n    const {\n      use: u1,\n      fallback: f1\n    } = a;\n    const {\n      use: u2,\n      fallback: f2\n    } = b;\n    if (u1 && u2) {\n      v.use = u1.concat(u2);\n    }\n    if (f1 && f2) {\n      v.fallback = mergeObjects(f1, f2);\n    }\n  }\n  return v;\n};\nconst SWRConfigContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nconst SWRConfig = props => {\n  const {\n    value\n  } = props;\n  const parentConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SWRConfigContext);\n  const isFunctionalConfig = isFunction(value);\n  const config = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => isFunctionalConfig ? value(parentConfig) : value, [isFunctionalConfig, parentConfig, value]);\n  // Extend parent context values and middleware.\n  const extendedConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => isFunctionalConfig ? config : mergeConfigs(parentConfig, config), [isFunctionalConfig, parentConfig, config]);\n  // Should not use the inherited provider.\n  const provider = config && config.provider;\n  // initialize the cache only on first access.\n  const cacheContextRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(UNDEFINED);\n  if (provider && !cacheContextRef.current) {\n    cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config);\n  }\n  const cacheContext = cacheContextRef.current;\n  // Override the cache if a new provider is given.\n  if (cacheContext) {\n    extendedConfig.cache = cacheContext[0];\n    extendedConfig.mutate = cacheContext[1];\n  }\n  // Unsubscribe events.\n  useIsomorphicLayoutEffect(() => {\n    if (cacheContext) {\n      cacheContext[2] && cacheContext[2]();\n      return cacheContext[3];\n    }\n  }, []);\n  return /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(SWRConfigContext.Provider, mergeObjects(props, {\n    value: extendedConfig\n  }));\n};\nconst INFINITE_PREFIX = '$inf$';\n\n// @ts-expect-error\nconst enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;\nconst use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];\nconst setupDevTools = () => {\n  if (enableDevtools) {\n    // @ts-expect-error\n    window.__SWR_DEVTOOLS_REACT__ = react__WEBPACK_IMPORTED_MODULE_0__;\n  }\n};\nconst normalize = args => {\n  return isFunction(args[1]) ? [args[0], args[1], args[2] || {}] : [args[0], null, (args[1] === null ? args[2] : args[1]) || {}];\n};\nconst useSWRConfig = () => {\n  return mergeObjects(defaultConfig, (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SWRConfigContext));\n};\nconst preload = (key_, fetcher) => {\n  const [key, fnArg] = serialize(key_);\n  const [,,, PRELOAD] = SWRGlobalState.get(cache);\n  // Prevent preload to be called multiple times before used.\n  if (PRELOAD[key]) return PRELOAD[key];\n  const req = fetcher(fnArg);\n  PRELOAD[key] = req;\n  return req;\n};\nconst middleware = useSWRNext => (key_, fetcher_, config) => {\n  // fetcher might be a sync function, so this should not be an async function\n  const fetcher = fetcher_ && ((...args) => {\n    const [key] = serialize(key_);\n    const [,,, PRELOAD] = SWRGlobalState.get(cache);\n    if (key.startsWith(INFINITE_PREFIX)) {\n      // we want the infinite fetcher to be called.\n      // handling of the PRELOAD cache happens there.\n      return fetcher_(...args);\n    }\n    const req = PRELOAD[key];\n    if (isUndefined(req)) return fetcher_(...args);\n    delete PRELOAD[key];\n    return req;\n  });\n  return useSWRNext(key_, fetcher, config);\n};\nconst BUILT_IN_MIDDLEWARE = use.concat(middleware);\n\n// It's tricky to pass generic types as parameters, so we just directly override\n// the types here.\nconst withArgs = hook => {\n  return function useSWRArgs(...args) {\n    // Get the default and inherited configuration.\n    const fallbackConfig = useSWRConfig();\n    // Normalize arguments.\n    const [key, fn, _config] = normalize(args);\n    // Merge configurations.\n    const config = mergeConfigs(fallbackConfig, _config);\n    // Apply middleware\n    let next = hook;\n    const {\n      use\n    } = config;\n    const middleware = (use || []).concat(BUILT_IN_MIDDLEWARE);\n    for (let i = middleware.length; i--;) {\n      next = middleware[i](next);\n    }\n    return next(key, fn || config.fetcher || null, config);\n  };\n};\n\n// Add a callback function to a list of keyed callback functions and return\n// the unsubscribe function.\nconst subscribeCallback = (key, callbacks, callback) => {\n  const keyedRevalidators = callbacks[key] || (callbacks[key] = []);\n  keyedRevalidators.push(callback);\n  return () => {\n    const index = keyedRevalidators.indexOf(callback);\n    if (index >= 0) {\n      // O(1): faster than splice\n      keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];\n      keyedRevalidators.pop();\n    }\n  };\n};\n\n// Create a custom hook with a middleware\nconst withMiddleware = (useSWR, middleware) => {\n  return (...args) => {\n    const [key, fn, config] = normalize(args);\n    const uses = (config.use || []).concat(middleware);\n    return useSWR(key, fn, {\n      ...config,\n      use: uses\n    });\n  };\n};\nsetupDevTools();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swr/dist/_internal/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swr/dist/core/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swr/dist/core/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SWRConfig: () => (/* binding */ SWRConfig),\n/* harmony export */   \"default\": () => (/* binding */ useSWR),\n/* harmony export */   mutate: () => (/* reexport safe */ swr_internal__WEBPACK_IMPORTED_MODULE_3__.mutate),\n/* harmony export */   preload: () => (/* reexport safe */ swr_internal__WEBPACK_IMPORTED_MODULE_3__.preload),\n/* harmony export */   unstable_serialize: () => (/* binding */ unstable_serialize),\n/* harmony export */   useSWRConfig: () => (/* reexport safe */ swr_internal__WEBPACK_IMPORTED_MODULE_3__.useSWRConfig)\n/* harmony export */ });\n/* harmony import */ var client_only__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! client-only */ \"(ssr)/./node_modules/next/dist/compiled/client-only/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n/* harmony import */ var swr_internal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! swr/_internal */ \"(ssr)/./node_modules/swr/dist/_internal/index.mjs\");\n\n\n\n\n\nconst unstable_serialize = key => (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.serialize)(key)[0];\n\n/// <reference types=\"react/experimental\" />\nconst use = react__WEBPACK_IMPORTED_MODULE_1__.use || (promise => {\n  if (promise.status === 'pending') {\n    throw promise;\n  } else if (promise.status === 'fulfilled') {\n    return promise.value;\n  } else if (promise.status === 'rejected') {\n    throw promise.reason;\n  } else {\n    promise.status = 'pending';\n    promise.then(v => {\n      promise.status = 'fulfilled';\n      promise.value = v;\n    }, e => {\n      promise.status = 'rejected';\n      promise.reason = e;\n    });\n    throw promise;\n  }\n});\nconst WITH_DEDUPE = {\n  dedupe: true\n};\nconst useSWRHandler = (_key, fetcher, config) => {\n  const {\n    cache,\n    compare,\n    suspense,\n    fallbackData,\n    revalidateOnMount,\n    revalidateIfStale,\n    refreshInterval,\n    refreshWhenHidden,\n    refreshWhenOffline,\n    keepPreviousData\n  } = config;\n  const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = swr_internal__WEBPACK_IMPORTED_MODULE_3__.SWRGlobalState.get(cache);\n  // `key` is the identifier of the SWR internal state,\n  // `fnArg` is the argument/arguments parsed from the key, which will be passed\n  // to the fetcher.\n  // All of them are derived from `_key`.\n  const [key, fnArg] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.serialize)(_key);\n  // If it's the initial render of this hook.\n  const initialMountedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n  // If the hook is unmounted already. This will be used to prevent some effects\n  // to be called after unmounting.\n  const unmountedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n  // Refs to keep the key and config.\n  const keyRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(key);\n  const fetcherRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(fetcher);\n  const configRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(config);\n  const getConfig = () => configRef.current;\n  const isActive = () => getConfig().isVisible() && getConfig().isOnline();\n  const [getCache, setCache, subscribeCache, getInitialCache] = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.createCacheHelper)(cache, key);\n  const stateDependencies = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({}).current;\n  const fallback = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(fallbackData) ? config.fallback[key] : fallbackData;\n  const isEqual = (prev, current) => {\n    for (const _ in stateDependencies) {\n      const t = _;\n      if (t === 'data') {\n        if (!compare(prev[t], current[t])) {\n          if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(prev[t])) {\n            return false;\n          }\n          if (!compare(returnedData, current[t])) {\n            return false;\n          }\n        }\n      } else {\n        if (current[t] !== prev[t]) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const getSnapshot = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    const shouldStartRequest = (() => {\n      if (!key) return false;\n      if (!fetcher) return false;\n      // If `revalidateOnMount` is set, we take the value directly.\n      if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(revalidateOnMount)) return revalidateOnMount;\n      // If it's paused, we skip revalidation.\n      if (getConfig().isPaused()) return false;\n      if (suspense) return false;\n      if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(revalidateIfStale)) return revalidateIfStale;\n      return true;\n    })();\n    // Get the cache and merge it with expected states.\n    const getSelectedCache = state => {\n      // We only select the needed fields from the state.\n      const snapshot = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.mergeObjects)(state);\n      delete snapshot._k;\n      if (!shouldStartRequest) {\n        return snapshot;\n      }\n      return {\n        isValidating: true,\n        isLoading: true,\n        ...snapshot\n      };\n    };\n    const cachedData = getCache();\n    const initialData = getInitialCache();\n    const clientSnapshot = getSelectedCache(cachedData);\n    const serverSnapshot = cachedData === initialData ? clientSnapshot : getSelectedCache(initialData);\n    // To make sure that we are returning the same object reference to avoid\n    // unnecessary re-renders, we keep the previous snapshot and use deep\n    // comparison to check if we need to return a new one.\n    let memorizedSnapshot = clientSnapshot;\n    return [() => {\n      const newSnapshot = getSelectedCache(getCache());\n      const compareResult = isEqual(newSnapshot, memorizedSnapshot);\n      if (compareResult) {\n        // Mentally, we should always return the `memorizedSnapshot` here\n        // as there's no change between the new and old snapshots.\n        // However, since the `isEqual` function only compares selected fields,\n        // the values of the unselected fields might be changed. That's\n        // simply because we didn't track them.\n        // To support the case in https://github.com/vercel/swr/pull/2576,\n        // we need to update these fields in the `memorizedSnapshot` too\n        // with direct mutations to ensure the snapshot is always up-to-date\n        // even for the unselected fields, but only trigger re-renders when\n        // the selected fields are changed.\n        memorizedSnapshot.data = newSnapshot.data;\n        memorizedSnapshot.isLoading = newSnapshot.isLoading;\n        memorizedSnapshot.isValidating = newSnapshot.isValidating;\n        memorizedSnapshot.error = newSnapshot.error;\n        return memorizedSnapshot;\n      } else {\n        memorizedSnapshot = newSnapshot;\n        return newSnapshot;\n      }\n    }, () => serverSnapshot];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cache, key]);\n  // Get the current state that SWR should return.\n  const cached = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore)((0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(callback => subscribeCache(key, (current, prev) => {\n    if (!isEqual(prev, current)) callback();\n  }),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cache, key]), getSnapshot[0], getSnapshot[1]);\n  const isInitialMount = !initialMountedRef.current;\n  const hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;\n  const cachedData = cached.data;\n  const data = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(cachedData) ? fallback : cachedData;\n  const error = cached.error;\n  // Use a ref to store previously returned data. Use the initial data as its initial value.\n  const laggyDataRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(data);\n  const returnedData = keepPreviousData ? (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(cachedData) ? laggyDataRef.current : cachedData : data;\n  // - Suspense mode and there's stale data for the initial render.\n  // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n  // - `revalidateIfStale` is enabled but `data` is not defined.\n  const shouldDoInitialRevalidation = (() => {\n    // if a key already has revalidators and also has error, we should not trigger revalidation\n    if (hasRevalidator && !(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(error)) return false;\n    // If `revalidateOnMount` is set, we take the value directly.\n    if (isInitialMount && !(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(revalidateOnMount)) return revalidateOnMount;\n    // If it's paused, we skip revalidation.\n    if (getConfig().isPaused()) return false;\n    // Under suspense mode, it will always fetch on render if there is no\n    // stale data so no need to revalidate immediately mount it again.\n    // If data exists, only revalidate if `revalidateIfStale` is true.\n    if (suspense) return (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(data) ? false : revalidateIfStale;\n    // If there is no stale data, we need to revalidate when mount;\n    // If `revalidateIfStale` is set to true, we will always revalidate.\n    return (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(data) || revalidateIfStale;\n  })();\n  // Resolve the default validating state:\n  // If it's able to validate, and it should revalidate when mount, this will be true.\n  const defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);\n  const isValidating = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(cached.isValidating) ? defaultValidatingState : cached.isValidating;\n  const isLoading = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(cached.isLoading) ? defaultValidatingState : cached.isLoading;\n  // The revalidation function is a carefully crafted wrapper of the original\n  // `fetcher`, to correctly handle the many edge cases.\n  const revalidate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async revalidateOpts => {\n    const currentFetcher = fetcherRef.current;\n    if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {\n      return false;\n    }\n    let newData;\n    let startAt;\n    let loading = true;\n    const opts = revalidateOpts || {};\n    // If there is no ongoing concurrent request, or `dedupe` is not set, a\n    // new request should be initiated.\n    const shouldStartNewRequest = !FETCH[key] || !opts.dedupe;\n    /*\n     For React 17\n     Do unmount check for calls:\n     If key has changed during the revalidation, or the component has been\n     unmounted, old dispatch and old event callbacks should not take any\n     effect\n     For React 18\n    only check if key has changed\n    https://github.com/reactwg/react-18/discussions/82\n    */\n    const callbackSafeguard = () => {\n      if (swr_internal__WEBPACK_IMPORTED_MODULE_3__.IS_REACT_LEGACY) {\n        return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;\n      }\n      return key === keyRef.current;\n    };\n    // The final state object when the request finishes.\n    const finalState = {\n      isValidating: false,\n      isLoading: false\n    };\n    const finishRequestAndUpdateState = () => {\n      setCache(finalState);\n    };\n    const cleanupState = () => {\n      // Check if it's still the same request before deleting it.\n      const requestInfo = FETCH[key];\n      if (requestInfo && requestInfo[1] === startAt) {\n        delete FETCH[key];\n      }\n    };\n    // Start fetching. Change the `isValidating` state, update the cache.\n    const initialState = {\n      isValidating: true\n    };\n    // It is in the `isLoading` state, if and only if there is no cached data.\n    // This bypasses fallback data and laggy data.\n    if ((0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(getCache().data)) {\n      initialState.isLoading = true;\n    }\n    try {\n      if (shouldStartNewRequest) {\n        setCache(initialState);\n        // If no cache is being rendered currently (it shows a blank page),\n        // we trigger the loading slow event.\n        if (config.loadingTimeout && (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(getCache().data)) {\n          setTimeout(() => {\n            if (loading && callbackSafeguard()) {\n              getConfig().onLoadingSlow(key, config);\n            }\n          }, config.loadingTimeout);\n        }\n        // Start the request and save the timestamp.\n        // Key must be truthy if entering here.\n        FETCH[key] = [currentFetcher(fnArg), (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.getTimestamp)()];\n      }\n      [newData, startAt] = FETCH[key];\n      newData = await newData;\n      if (shouldStartNewRequest) {\n        // If the request isn't interrupted, clean it up after the\n        // deduplication interval.\n        setTimeout(cleanupState, config.dedupingInterval);\n      }\n      // If there're other ongoing request(s), started after the current one,\n      // we need to ignore the current one to avoid possible race conditions:\n      //   req1------------------>res1        (current one)\n      //        req2---------------->res2\n      // the request that fired later will always be kept.\n      // The timestamp maybe be `undefined` or a number\n      if (!FETCH[key] || FETCH[key][1] !== startAt) {\n        if (shouldStartNewRequest) {\n          if (callbackSafeguard()) {\n            getConfig().onDiscarded(key);\n          }\n        }\n        return false;\n      }\n      // Clear error.\n      finalState.error = swr_internal__WEBPACK_IMPORTED_MODULE_3__.UNDEFINED;\n      // If there're other mutations(s), that overlapped with the current revalidation:\n      // case 1:\n      //   req------------------>res\n      //       mutate------>end\n      // case 2:\n      //         req------------>res\n      //   mutate------>end\n      // case 3:\n      //   req------------------>res\n      //       mutate-------...---------->\n      // we have to ignore the revalidation result (res) because it's no longer fresh.\n      // meanwhile, a new revalidation should be triggered when the mutation ends.\n      const mutationInfo = MUTATION[key];\n      if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(mutationInfo) && (\n      // case 1\n      startAt <= mutationInfo[0] ||\n      // case 2\n      startAt <= mutationInfo[1] ||\n      // case 3\n      mutationInfo[1] === 0)) {\n        finishRequestAndUpdateState();\n        if (shouldStartNewRequest) {\n          if (callbackSafeguard()) {\n            getConfig().onDiscarded(key);\n          }\n        }\n        return false;\n      }\n      // Deep compare with the latest state to avoid extra re-renders.\n      // For local state, compare and assign.\n      const cacheData = getCache().data;\n      // Since the compare fn could be custom fn\n      // cacheData might be different from newData even when compare fn returns True\n      finalState.data = compare(cacheData, newData) ? cacheData : newData;\n      // Trigger the successful callback if it's the original request.\n      if (shouldStartNewRequest) {\n        if (callbackSafeguard()) {\n          getConfig().onSuccess(newData, key, config);\n        }\n      }\n    } catch (err) {\n      cleanupState();\n      const currentConfig = getConfig();\n      const {\n        shouldRetryOnError\n      } = currentConfig;\n      // Not paused, we continue handling the error. Otherwise, discard it.\n      if (!currentConfig.isPaused()) {\n        // Get a new error, don't use deep comparison for errors.\n        finalState.error = err;\n        // Error event and retry logic. Only for the actual request, not\n        // deduped ones.\n        if (shouldStartNewRequest && callbackSafeguard()) {\n          currentConfig.onError(err, key, currentConfig);\n          if (shouldRetryOnError === true || (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isFunction)(shouldRetryOnError) && shouldRetryOnError(err)) {\n            if (!getConfig().revalidateOnFocus || !getConfig().revalidateOnReconnect || isActive()) {\n              // If it's inactive, stop. It will auto-revalidate when\n              // refocusing or reconnecting.\n              // When retrying, deduplication is always enabled.\n              currentConfig.onErrorRetry(err, key, currentConfig, _opts => {\n                const revalidators = EVENT_REVALIDATORS[key];\n                if (revalidators && revalidators[0]) {\n                  revalidators[0](swr_internal__WEBPACK_IMPORTED_MODULE_3__.revalidateEvents.ERROR_REVALIDATE_EVENT, _opts);\n                }\n              }, {\n                retryCount: (opts.retryCount || 0) + 1,\n                dedupe: true\n              });\n            }\n          }\n        }\n      }\n    }\n    // Mark loading as stopped.\n    loading = false;\n    // Update the current hook's state.\n    finishRequestAndUpdateState();\n    return true;\n  },\n  // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n  // `keyValidating` are depending on `key`, so we can exclude them from\n  // the deps array.\n  //\n  // FIXME:\n  // `fn` and `config` might be changed during the lifecycle,\n  // but they might be changed every render like this.\n  // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n  // So we omit the values from the deps array\n  // even though it might cause unexpected behaviors.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [key, cache]);\n  // Similar to the global mutate but bound to the current cache and key.\n  // `cache` isn't allowed to change during the lifecycle.\n  const boundMutate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(\n  // Use callback to make sure `keyRef.current` returns latest result every time\n  (...args) => {\n    return (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.internalMutate)(cache, keyRef.current, ...args);\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  // The logic for updating refs.\n  (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(() => {\n    fetcherRef.current = fetcher;\n    configRef.current = config;\n    // Handle laggy data updates. If there's cached data of the current key,\n    // it'll be the correct reference.\n    if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(cachedData)) {\n      laggyDataRef.current = cachedData;\n    }\n  });\n  // After mounted or key changed.\n  (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(() => {\n    if (!key) return;\n    const softRevalidate = revalidate.bind(swr_internal__WEBPACK_IMPORTED_MODULE_3__.UNDEFINED, WITH_DEDUPE);\n    // Expose revalidators to global event listeners. So we can trigger\n    // revalidation from the outside.\n    let nextFocusRevalidatedAt = 0;\n    const onRevalidate = (type, opts = {}) => {\n      if (type == swr_internal__WEBPACK_IMPORTED_MODULE_3__.revalidateEvents.FOCUS_EVENT) {\n        const now = Date.now();\n        if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {\n          nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;\n          softRevalidate();\n        }\n      } else if (type == swr_internal__WEBPACK_IMPORTED_MODULE_3__.revalidateEvents.RECONNECT_EVENT) {\n        if (getConfig().revalidateOnReconnect && isActive()) {\n          softRevalidate();\n        }\n      } else if (type == swr_internal__WEBPACK_IMPORTED_MODULE_3__.revalidateEvents.MUTATE_EVENT) {\n        return revalidate();\n      } else if (type == swr_internal__WEBPACK_IMPORTED_MODULE_3__.revalidateEvents.ERROR_REVALIDATE_EVENT) {\n        return revalidate(opts);\n      }\n      return;\n    };\n    const unsubEvents = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.subscribeCallback)(key, EVENT_REVALIDATORS, onRevalidate);\n    // Mark the component as mounted and update corresponding refs.\n    unmountedRef.current = false;\n    keyRef.current = key;\n    initialMountedRef.current = true;\n    // Keep the original key in the cache.\n    setCache({\n      _k: fnArg\n    });\n    // Trigger a revalidation\n    if (shouldDoInitialRevalidation) {\n      if ((0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(data) || swr_internal__WEBPACK_IMPORTED_MODULE_3__.IS_SERVER) {\n        // Revalidate immediately.\n        softRevalidate();\n      } else {\n        // Delay the revalidate if we have data to return so we won't block\n        // rendering.\n        (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.rAF)(softRevalidate);\n      }\n    }\n    return () => {\n      // Mark it as unmounted.\n      unmountedRef.current = true;\n      unsubEvents();\n    };\n  }, [key]);\n  // Polling\n  (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(() => {\n    let timer;\n    function next() {\n      // Use the passed interval\n      // ...or invoke the function with the updated data to get the interval\n      const interval = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isFunction)(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;\n      // We only start the next interval if `refreshInterval` is not 0, and:\n      // - `force` is true, which is the start of polling\n      // - or `timer` is not 0, which means the effect wasn't canceled\n      if (interval && timer !== -1) {\n        timer = setTimeout(execute, interval);\n      }\n    }\n    function execute() {\n      // Check if it's OK to execute:\n      // Only revalidate when the page is visible, online, and not errored.\n      if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {\n        revalidate(WITH_DEDUPE).then(next);\n      } else {\n        // Schedule the next interval to check again.\n        next();\n      }\n    }\n    next();\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n        timer = -1;\n      }\n    };\n  }, [refreshInterval, refreshWhenHidden, refreshWhenOffline, key]);\n  // Display debug info in React DevTools.\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useDebugValue)(returnedData);\n  // In Suspense mode, we can't return the empty `data` state.\n  // If there is an `error`, the `error` needs to be thrown to the error boundary.\n  // If there is no `error`, the `revalidation` promise needs to be thrown to\n  // the suspense boundary.\n  if (suspense && (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(data) && key) {\n    // SWR should throw when trying to use Suspense on the server with React 18,\n    // without providing any initial data. See:\n    // https://github.com/vercel/swr/issues/1832\n    if (!swr_internal__WEBPACK_IMPORTED_MODULE_3__.IS_REACT_LEGACY && swr_internal__WEBPACK_IMPORTED_MODULE_3__.IS_SERVER) {\n      throw new Error('Fallback data is required when using suspense in SSR.');\n    }\n    // Always update fetcher and config refs even with the Suspense mode.\n    fetcherRef.current = fetcher;\n    configRef.current = config;\n    unmountedRef.current = false;\n    const req = PRELOAD[key];\n    if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(req)) {\n      const promise = boundMutate(req);\n      use(promise);\n    }\n    if ((0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(error)) {\n      const promise = revalidate(WITH_DEDUPE);\n      if (!(0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.isUndefined)(returnedData)) {\n        promise.status = 'fulfilled';\n        promise.value = true;\n      }\n      use(promise);\n    } else {\n      throw error;\n    }\n  }\n  return {\n    mutate: boundMutate,\n    get data() {\n      stateDependencies.data = true;\n      return returnedData;\n    },\n    get error() {\n      stateDependencies.error = true;\n      return error;\n    },\n    get isValidating() {\n      stateDependencies.isValidating = true;\n      return isValidating;\n    },\n    get isLoading() {\n      stateDependencies.isLoading = true;\n      return isLoading;\n    }\n  };\n};\nconst SWRConfig = swr_internal__WEBPACK_IMPORTED_MODULE_3__.OBJECT.defineProperty(swr_internal__WEBPACK_IMPORTED_MODULE_3__.SWRConfig, 'defaultValue', {\n  value: swr_internal__WEBPACK_IMPORTED_MODULE_3__.defaultConfig\n});\n/**\n * A hook to fetch data.\n *\n * @link https://swr.vercel.app\n * @example\n * ```jsx\n * import useSWR from 'swr'\n * function Profile() {\n *   const { data, error, isLoading } = useSWR('/api/user', fetcher)\n *   if (error) return <div>failed to load</div>\n *   if (isLoading) return <div>loading...</div>\n *   return <div>hello {data.name}!</div>\n * }\n * ```\n */\nconst useSWR = (0,swr_internal__WEBPACK_IMPORTED_MODULE_3__.withArgs)(useSWRHandler);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swr/dist/core/index.mjs\n");

/***/ })

};
;